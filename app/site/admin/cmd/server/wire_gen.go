// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/mizumoto-cn/bookkeepingo/app/site/admin/internal/biz"
	"github.com/mizumoto-cn/bookkeepingo/app/site/admin/internal/conf"
	"github.com/mizumoto-cn/bookkeepingo/app/site/admin/internal/data"
	"github.com/mizumoto-cn/bookkeepingo/app/site/admin/internal/server"
	"github.com/mizumoto-cn/bookkeepingo/app/site/admin/internal/service"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	accountServiceClient := data.NewAccountServiceClient(discovery, tracerProvider)
	dataData, err := data.NewData(accountServiceClient, confData, logger)
	if err != nil {
		return nil, nil, err
	}
	accountRepo := data.NewAccountRepo(dataData, logger)
	accountUsecase := biz.NewAccountUsecase(accountRepo, accountServiceClient, logger)
	siteAdminService := service.NewSiteAdminService(accountUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, logger, tracerProvider, siteAdminService)
	grpcServer := server.NewGRPCServer(confServer, logger, tracerProvider, siteAdminService)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
	}, nil
}
