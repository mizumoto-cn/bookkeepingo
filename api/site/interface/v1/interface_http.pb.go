// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.2
// - protoc             v3.21.9
// source: v1/interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSiteAdminServiceGetAccount = "/bookkeepingo.mizumoto.tech.site.interface.v1.SiteAdminService/GetAccount"
const OperationSiteAdminServiceListAccount = "/bookkeepingo.mizumoto.tech.site.interface.v1.SiteAdminService/ListAccount"
const OperationSiteAdminServiceLogin = "/bookkeepingo.mizumoto.tech.site.interface.v1.SiteAdminService/Login"
const OperationSiteAdminServiceLogout = "/bookkeepingo.mizumoto.tech.site.interface.v1.SiteAdminService/Logout"

type SiteAdminServiceHTTPServer interface {
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
}

func RegisterSiteAdminServiceHTTPServer(s *http.Server, srv SiteAdminServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/login", _SiteAdminService_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _SiteAdminService_Logout0_HTTP_Handler(srv))
	r.GET("/v1/accounts", _SiteAdminService_ListAccount0_HTTP_Handler(srv))
	r.GET("/v1/accounts/{id}", _SiteAdminService_GetAccount0_HTTP_Handler(srv))
}

func _SiteAdminService_Login0_HTTP_Handler(srv SiteAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSiteAdminServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _SiteAdminService_Logout0_HTTP_Handler(srv SiteAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSiteAdminServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _SiteAdminService_ListAccount0_HTTP_Handler(srv SiteAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSiteAdminServiceListAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccount(ctx, req.(*ListAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _SiteAdminService_GetAccount0_HTTP_Handler(srv SiteAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSiteAdminServiceGetAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountResponse)
		return ctx.Result(200, reply)
	}
}

type SiteAdminServiceHTTPClient interface {
	GetAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *GetAccountResponse, err error)
	ListAccount(ctx context.Context, req *ListAccountRequest, opts ...http.CallOption) (rsp *ListAccountResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutResponse, err error)
}

type SiteAdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSiteAdminServiceHTTPClient(client *http.Client) SiteAdminServiceHTTPClient {
	return &SiteAdminServiceHTTPClientImpl{client}
}

func (c *SiteAdminServiceHTTPClientImpl) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*GetAccountResponse, error) {
	var out GetAccountResponse
	pattern := "/v1/accounts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSiteAdminServiceGetAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SiteAdminServiceHTTPClientImpl) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...http.CallOption) (*ListAccountResponse, error) {
	var out ListAccountResponse
	pattern := "/v1/accounts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSiteAdminServiceListAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SiteAdminServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSiteAdminServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SiteAdminServiceHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutResponse, error) {
	var out LogoutResponse
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSiteAdminServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
